// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gocrane/api/autoscaling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubstituteLister helps list Substitutes.
// All objects returned here must be treated as read-only.
type SubstituteLister interface {
	// List lists all Substitutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Substitute, err error)
	// Substitutes returns an object that can list and get Substitutes.
	Substitutes(namespace string) SubstituteNamespaceLister
	SubstituteListerExpansion
}

// substituteLister implements the SubstituteLister interface.
type substituteLister struct {
	indexer cache.Indexer
}

// NewSubstituteLister returns a new SubstituteLister.
func NewSubstituteLister(indexer cache.Indexer) SubstituteLister {
	return &substituteLister{indexer: indexer}
}

// List lists all Substitutes in the indexer.
func (s *substituteLister) List(selector labels.Selector) (ret []*v1alpha1.Substitute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Substitute))
	})
	return ret, err
}

// Substitutes returns an object that can list and get Substitutes.
func (s *substituteLister) Substitutes(namespace string) SubstituteNamespaceLister {
	return substituteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubstituteNamespaceLister helps list and get Substitutes.
// All objects returned here must be treated as read-only.
type SubstituteNamespaceLister interface {
	// List lists all Substitutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Substitute, err error)
	// Get retrieves the Substitute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Substitute, error)
	SubstituteNamespaceListerExpansion
}

// substituteNamespaceLister implements the SubstituteNamespaceLister
// interface.
type substituteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Substitutes in the indexer for a given namespace.
func (s substituteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Substitute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Substitute))
	})
	return ret, err
}

// Get retrieves the Substitute from the indexer for a given namespace and name.
func (s substituteNamespaceLister) Get(name string) (*v1alpha1.Substitute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("substitute"), name)
	}
	return obj.(*v1alpha1.Substitute), nil
}
